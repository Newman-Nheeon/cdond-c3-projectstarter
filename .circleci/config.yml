version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            
  
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: front-end test
          command: |
              cd frontend
              npm install
              npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
                  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: back-end test
          command: |
              cd backend
              npm install
              npm run test
              npm audit fix --audit-level=critical --force
              npm audit fix --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: front-end scan
          command: |
              cd frontend
              npm install
              npm audit fix --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: back-end scan
          command: |
              cd backend
              npm install
              npm audit fix --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=your-tag \
            --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=your-tag \
            --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:project,Values=udapeople" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # This command has a when: on_fail
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
        fingerprints: ["67:64:1c:a9:af:fd:ef:eb:84:fa:28:9a:c1:31:77:22"]
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here / install dependencies
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
            
      - destroy-environment:
                  workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm aws-cli curl
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm build
          # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash to kvdb
          command: |
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                  curl https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
     # Here's where you will add some code to rollback on failure 
    

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]